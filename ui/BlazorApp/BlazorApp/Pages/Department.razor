@page "/department"
@using System.Text.Json
@using System.Text.Json.Serialization
@inject IHttpClientFactory ClientFactory
@inject Microsoft.Extensions.Configuration.IConfiguration config
@inject IJSRuntime JS


<button type="button" 
        class="btn btn-primary m-2 float-end"
        data-bs-toggle="modal"
        data-bs-target="#exampleModal"
        @onclick="addClick">Add Department</button>

<table class="table table-striped">
    <thead>
        <tr>
            <th>
                <div class="d-flex flex-row">

                    <input class="form-control m-2" @bind="DepartmentIdFilter" />
                    <button class="m-1" @onclick="FilterFn">Filter</button>

                    <button class="btn btn-light" @onclick='()=>SortFn("DepartmentId","asc")'>
                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-arrow-up-square-fill" viewBox="0 0 16 16">
                            <path d="M2 16a2 2 0 0 1-2-2V2a2 2 0 0 1 2-2h12a2 2 0 0 1 2 2v12a2 2 0 0 1-2 2H2zm6.5-4.5V5.707l2.146 2.147a.5.5 0 0 0 .708-.708l-3-3a.5.5 0 0 0-.708 0l-3 3a.5.5 0 1 0 .708.708L7.5 5.707V11.5a.5.5 0 0 0 1 0z" />
                        </svg>
                    </button>
                    <button class="btn btn-light" @onclick='()=>SortFn("DepartmentId","desc")'>
                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-arrow-down-square-fill" viewBox="0 0 16 16">
                            <path d="M2 0a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2H2zm6.5 4.5v5.793l2.146-2.147a.5.5 0 0 1 .708.708l-3 3a.5.5 0 0 1-.708 0l-3-3a.5.5 0 1 1 .708-.708L7.5 10.293V4.5a.5.5 0 0 1 1 0z" />
                        </svg>
                    </button>
                </div>
            Department Id</th>
            <th>
                <div class="d-flex flex-row">

                    <input class="form-control m-2" @bind="DepartmentNameFilter" />
                    <button class="m-1" @onclick="FilterFn">Filter</button>

                    <button class="btn btn-light" @onclick='()=>SortFn("DepartmentName","asc")'>
                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-arrow-up-square-fill" viewBox="0 0 16 16">
                            <path d="M2 16a2 2 0 0 1-2-2V2a2 2 0 0 1 2-2h12a2 2 0 0 1 2 2v12a2 2 0 0 1-2 2H2zm6.5-4.5V5.707l2.146 2.147a.5.5 0 0 0 .708-.708l-3-3a.5.5 0 0 0-.708 0l-3 3a.5.5 0 1 0 .708.708L7.5 5.707V11.5a.5.5 0 0 0 1 0z" />
                        </svg>
                    </button>
                    <button class="btn btn-light" @onclick='()=>SortFn("DepartmentName","desc")'>
                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-arrow-down-square-fill" viewBox="0 0 16 16">
                            <path d="M2 0a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2H2zm6.5 4.5v5.793l2.146-2.147a.5.5 0 0 1 .708.708l-3 3a.5.5 0 0 1-.708 0l-3-3a.5.5 0 1 1 .708-.708L7.5 10.293V4.5a.5.5 0 0 1 1 0z" />
                        </svg>
                    </button>

                </div>
            Department Name</th>
            <th>Options</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var dep in departments)
        {
            <tr>
                <td>@dep.DepartmentId</td>
                <td>@dep.DepartmentName</td>
                <td>
                    <button type="button" class="btn btn-light mr-1"
                            data-bs-toggle="modal"
                            data-bs-target="#exampleModal"
                            @onclick="(()=> editClick(dep))"
                            >
                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-pencil-square" viewBox="0 0 16 16">
                            <path d="M15.502 1.94a.5.5 0 0 1 0 .706L14.459 3.69l-2-2L13.502.646a.5.5 0 0 1 .707 0l1.293 1.293zm-1.75 2.456-2-2L4.939 9.21a.5.5 0 0 0-.121.196l-.805 2.414a.25.25 0 0 0 .316.316l2.414-.805a.5.5 0 0 0 .196-.12l6.813-6.814z" />
                            <path fill-rule="evenodd" d="M1 13.5A1.5 1.5 0 0 0 2.5 15h11a1.5 1.5 0 0 0 1.5-1.5v-6a.5.5 0 0 0-1 0v6a.5.5 0 0 1-.5.5h-11a.5.5 0 0 1-.5-.5v-11a.5.5 0 0 1 .5-.5H9a.5.5 0 0 0 0-1H2.5A1.5 1.5 0 0 0 1 2.5v11z" />
                        </svg>
                    </button>
                    <button type="button" class="btn btn-light mr-1" 
                            @onclick="(()=> deleteClick(dep.DepartmentId))">
                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-trash-fill" viewBox="0 0 16 16">
                            <path d="M2.5 1a1 1 0 0 0-1 1v1a1 1 0 0 0 1 1H3v9a2 2 0 0 0 2 2h6a2 2 0 0 0 2-2V4h.5a1 1 0 0 0 1-1V2a1 1 0 0 0-1-1H10a1 1 0 0 0-1-1H7a1 1 0 0 0-1 1H2.5zm3 4a.5.5 0 0 1 .5.5v7a.5.5 0 0 1-1 0v-7a.5.5 0 0 1 .5-.5zM8 5a.5.5 0 0 1 .5.5v7a.5.5 0 0 1-1 0v-7A.5.5 0 0 1 8 5zm3 .5v7a.5.5 0 0 1-1 0v-7a.5.5 0 0 1 1 0z" />
                        </svg>
                    </button>
                </td>
            </tr>
        }
    </tbody>
</table>

<div class="modal fade" id="exampleModal" tabindex="-1"
     aria-labelledby="exampleModalLabel" aria-hidden="true">
<div class="modal-dialog modal-lg modal-dialog-centered">
<div class="modal-content">
        
    <div class="modal-header">
        <h5 class="modal-title" id="exampleModalLabel">@modalTitle</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
    </div>

    <div class="modal-body">

        <div class="input-group mb-3">
            <span class="input-group-text">Department Name</span>
            <input type="text" class="form-control" @bind="DepartmentName" />
        </div>

        @if (modalTitle == "Add Department")
        {
            <button type="button" class="btn btn-primary" @onclick="createClick">
                Create
            </button>
        }
        else
        {
            <button type="button" class="btn btn-primary" @onclick="updateClick">
                Update
            </button>
        }

    </div>


</div>
</div>
</div>



@code {
    public class DepartmentClass
    {
        public int DepartmentId { get; set; }
        public string DepartmentName { get; set; }
    }

    private IEnumerable<DepartmentClass> departments = Array.Empty<DepartmentClass>();

    private string DepartmentIdFilter = "";
    private string DepartmentNameFilter = "";

    private IEnumerable<DepartmentClass> departmentsWithoutFilter = Array.Empty<DepartmentClass>();

    private string modalTitle;
    private int DepartmentId;
    private string DepartmentName;


    protected override async Task OnInitializedAsync()
    {
        await refreshList();
    }


    private async Task refreshList()
    {
        var request = new HttpRequestMessage(HttpMethod.Get,
            config["API_URL"] + "department");

        var client = ClientFactory.CreateClient();

        var response = await client.SendAsync(request);

        using var responseStream = await response.Content.ReadAsStreamAsync();
        departmentsWithoutFilter =  departments = await JsonSerializer.DeserializeAsync<IEnumerable<DepartmentClass>>(responseStream);
    }

    private void FilterFn()
    {
        departments = departmentsWithoutFilter.Where(
            c => c.DepartmentId.ToString().Contains(DepartmentIdFilter) &&
            c.DepartmentName.ToLower().Contains(DepartmentNameFilter.ToLower()));
    }

    private void SortFn(string property, string asc_desc)
    {
        if (property == "DepartmentId")
        {
            if (asc_desc == "asc")
            {
                departments = departmentsWithoutFilter.OrderBy(c => c.DepartmentId);
            }
            else
            {
                departments = departmentsWithoutFilter.OrderByDescending(c => c.DepartmentId);
            }
        }
        else
        {
            if (asc_desc == "asc")
            {
                departments = departmentsWithoutFilter.OrderBy(c => c.DepartmentName);
            }
            else
            {
                departments = departmentsWithoutFilter.OrderByDescending(c => c.DepartmentName);
            }
        }
    }


    private async Task createClick()
    {
        var depObj = new DepartmentClass() { DepartmentName = DepartmentName };

        var request = new HttpRequestMessage(HttpMethod.Post,
            config["API_URL"] + "department");
        request.Content = new StringContent(JsonSerializer.Serialize(depObj), null, "application/json");

        var client = ClientFactory.CreateClient();

        var response = await client.SendAsync(request);

        using var responseStream = await response.Content.ReadAsStreamAsync();
        string res = await JsonSerializer.DeserializeAsync<string>(responseStream);

        await JS.InvokeVoidAsync("alert", res);

        await refreshList();
    }

    private async Task updateClick()
    {
        var depObj = new DepartmentClass() {
            DepartmentId = DepartmentId,
            DepartmentName = DepartmentName };

        var request = new HttpRequestMessage(HttpMethod.Put,
            config["API_URL"] + "department");
        request.Content = new StringContent(JsonSerializer.Serialize(depObj), null, "application/json");

        var client = ClientFactory.CreateClient();

        var response = await client.SendAsync(request);

        using var responseStream = await response.Content.ReadAsStreamAsync();
        string res = await JsonSerializer.DeserializeAsync<string>(responseStream);

        await JS.InvokeVoidAsync("alert", res);

        await refreshList();
    }


    private async Task deleteClick(int id)
    {
        if(!await JS.InvokeAsync<bool>("confirm","Are you sure"))
        {
            return;
        }

        var request = new HttpRequestMessage(HttpMethod.Delete,
            config["API_URL"] + "department/"+id.ToString());

        var client = ClientFactory.CreateClient();

        var response = await client.SendAsync(request);

        using var responseStream = await response.Content.ReadAsStreamAsync();
        string res = await JsonSerializer.DeserializeAsync<string>(responseStream);

        await JS.InvokeVoidAsync("alert", res);

        await refreshList();
    }

    private void addClick()
    {
        modalTitle = "Add Department";
        DepartmentId = 0;
        DepartmentName = "";
    }

    private void editClick(DepartmentClass dep)
    {
        modalTitle = "Edit Department";
        DepartmentId = dep.DepartmentId;
        DepartmentName = dep.DepartmentName;
    }


}
