// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace BlazorApp.Pages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "D:\tutorial\ui\BlazorApp\BlazorApp\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "D:\tutorial\ui\BlazorApp\BlazorApp\_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "D:\tutorial\ui\BlazorApp\BlazorApp\_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "D:\tutorial\ui\BlazorApp\BlazorApp\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "D:\tutorial\ui\BlazorApp\BlazorApp\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "D:\tutorial\ui\BlazorApp\BlazorApp\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "D:\tutorial\ui\BlazorApp\BlazorApp\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "D:\tutorial\ui\BlazorApp\BlazorApp\_Imports.razor"
using BlazorApp;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "D:\tutorial\ui\BlazorApp\BlazorApp\_Imports.razor"
using BlazorApp.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "D:\tutorial\ui\BlazorApp\BlazorApp\Pages\Employee.razor"
using System.Text.Json;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "D:\tutorial\ui\BlazorApp\BlazorApp\Pages\Employee.razor"
using System.Text.Json.Serialization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "D:\tutorial\ui\BlazorApp\BlazorApp\Pages\Employee.razor"
using BlazorInputFile;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "D:\tutorial\ui\BlazorApp\BlazorApp\Pages\Employee.razor"
using System.IO;

#line default
#line hidden
#nullable disable
    [Microsoft.AspNetCore.Components.RouteAttribute("/employee")]
    public partial class Employee : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 122 "D:\tutorial\ui\BlazorApp\BlazorApp\Pages\Employee.razor"
       
    public class DepartmentClass
    {
        public int DepartmentId { get; set; }
        public string DepartmentName { get; set; }
    }

    public class EmployeeClass
    {
        public int EmployeeId { get; set; }
        public string EmployeeName { get; set; }
        public string Department { get; set; }
        public string DateOfJoining { get; set; }
        public string PhotoFileName { get; set; }
    }

    private IEnumerable<DepartmentClass> departments = Array.Empty<DepartmentClass>();

    private IEnumerable<EmployeeClass> employees = Array.Empty<EmployeeClass>();

    private string modalTitle;
    private int EmployeeId;
    private string EmployeeName;
    private string Department;
    private DateTime DateOfJoining;
    private string PhotoFileName;
    private string PhotoPath;


    protected override async Task OnInitializedAsync()
    {
        PhotoPath = config["PHOTO_URL"];
        PhotoFileName = "anonymous.png";
        await refreshList();
    }


    private async Task refreshList()
    {
        var request = new HttpRequestMessage(HttpMethod.Get,
            config["API_URL"] + "department");

        var client = ClientFactory.CreateClient();

        var response = await client.SendAsync(request);

        using var responseStream = await response.Content.ReadAsStreamAsync();
        departments = await JsonSerializer.DeserializeAsync<IEnumerable<DepartmentClass>>(responseStream);


        var request2 = new HttpRequestMessage(HttpMethod.Get,
            config["API_URL"] + "employee");
        var client2 = ClientFactory.CreateClient();
        var response2 = await client2.SendAsync(request2);
        using var responseStream2 = await response2.Content.ReadAsStreamAsync();
        employees = await JsonSerializer.DeserializeAsync<IEnumerable<EmployeeClass>>(responseStream2);
    }


    private async Task UploadFile(IFileListEntry[] files)
    {
        var file = files.FirstOrDefault();
        var ms = new MemoryStream();
        await file.Data.CopyToAsync(ms);

        var content = new MultipartFormDataContent { { new ByteArrayContent(ms.GetBuffer()), "\"file\"", file.Name } };

        var request = new HttpRequestMessage(HttpMethod.Post,
            config["API_URL"] + "employee/savefile");
        request.Content = content;

        var client = ClientFactory.CreateClient();

        var response = await client.SendAsync(request);

        using var responseStream = await response.Content.ReadAsStreamAsync();
        PhotoFileName =  await JsonSerializer.DeserializeAsync<string>(responseStream);


    }

    private async Task createClick()
    {
        var empObj = new EmployeeClass() {
            EmployeeName=EmployeeName,
            Department=Department,
            DateOfJoining=DateOfJoining.ToString("yyyy-MM-dd"),
            PhotoFileName=PhotoFileName
        };

        var request = new HttpRequestMessage(HttpMethod.Post,
            config["API_URL"] + "employee");
        request.Content = new StringContent(JsonSerializer.Serialize(empObj), null, "application/json");

        var client = ClientFactory.CreateClient();

        var response = await client.SendAsync(request);

        using var responseStream = await response.Content.ReadAsStreamAsync();
        string res = await JsonSerializer.DeserializeAsync<string>(responseStream);

        await JS.InvokeVoidAsync("alert", res);

        await refreshList();
    }

    private async Task updateClick()
    {
        var empObj = new EmployeeClass()
        {
            EmployeeId=EmployeeId,
            EmployeeName = EmployeeName,
            Department = Department,
            DateOfJoining = DateOfJoining.ToString("yyyy-MM-dd"),
            PhotoFileName = PhotoFileName
        };

        var request = new HttpRequestMessage(HttpMethod.Put,
        config["API_URL"] + "employee");
        request.Content = new StringContent(JsonSerializer.Serialize(empObj), null, "application/json");

        var client = ClientFactory.CreateClient();

        var response = await client.SendAsync(request);

        using var responseStream = await response.Content.ReadAsStreamAsync();
        string res = await JsonSerializer.DeserializeAsync<string>(responseStream);

        await JS.InvokeVoidAsync("alert", res);

        await refreshList();
    }


    private async Task deleteClick(int id)
    {
        if (!await JS.InvokeAsync<bool>("confirm", "Are you sure"))
        {
            return;
        }

        var request = new HttpRequestMessage(HttpMethod.Delete,
            config["API_URL"] + "employee/" + id.ToString());

        var client = ClientFactory.CreateClient();

        var response = await client.SendAsync(request);

        using var responseStream = await response.Content.ReadAsStreamAsync();
        string res = await JsonSerializer.DeserializeAsync<string>(responseStream);

        await JS.InvokeVoidAsync("alert", res);

        await refreshList();
    }

    private void addClick()
    {
        modalTitle = "Add Employee";
        EmployeeId = 0;
        EmployeeName = "";
        Department = "";
        DateOfJoining = DateTime.Now;
        PhotoFileName = "anonymous.png";
    }

    private void editClick(EmployeeClass emp)
    {
        modalTitle = "Edit Employee";
        EmployeeId = emp.EmployeeId;
        EmployeeName = emp.EmployeeName;
        Department = emp.Department;
        DateOfJoining = Convert.ToDateTime(emp.DateOfJoining);
        PhotoFileName = emp.PhotoFileName;
    }



#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IJSRuntime JS { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private Microsoft.Extensions.Configuration.IConfiguration config { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IHttpClientFactory ClientFactory { get; set; }
    }
}
#pragma warning restore 1591
